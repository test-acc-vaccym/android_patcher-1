From b9f79a92a94b7d070af42ef31f36b344d58eaea2 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Fri, 5 Jan 2018 00:26:38 +0100
Subject: [PATCH] Huawei:: HWC doesn't understand 0,0,0,0 == fullscreen damage.
 Set it to the whole visible surface

::Huawei:: Fix damage for Huawei compositor

For Huawei compositor, the damage area is a region on the screen.
But for SurfaceFlinger, this is a region on the source surface.
On Huawei devices, do the plane conversion.

This fixes several UI glitches, most notably GBoard.

Change-Id: I5342418406a5f8b0070145f621f342824e05d321
---
 services/surfaceflinger/Layer.cpp          | 35 +++++++++++++++++++++++++++++-
 services/surfaceflinger/SurfaceFlinger.cpp |  7 ++++++
 services/surfaceflinger/SurfaceFlinger.h   |  2 ++
 3 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 038ece2e0..656221b70 100755
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -871,7 +871,40 @@ void Layer::setPerFrameData(const sp<const DisplayDevice>& displayDevice) {
         visible.dump(LOG_TAG);
     }
 
-    error = hwcLayer->setSurfaceDamage(surfaceDamageRegion);
+    if (mFlinger->mDamageUsesScreenReference) {
+        const Rect& frame = hwcInfo.displayFrame;
+        int32_t left = frame.left;
+        int32_t top = frame.top;
+        int32_t right = frame.right;
+        int32_t bottom = frame.bottom;
+        if (surfaceDamageRegion.getBounds() == Rect::INVALID_RECT) {
+            auto fullSource = Region(Rect(left, top, right, bottom));
+            error = hwcLayer->setSurfaceDamage(fullSource);
+        } else {
+            // There is no easy way to scale, so just scale the bounds
+            const Rect& preDamageRect = surfaceDamageRegion.bounds();
+            const FloatRect& crop = hwcInfo.sourceCrop;
+
+            float frameWidth = right - left;
+            float frameHeight = bottom - top;
+
+            float cropWidth = crop.right - crop.left;
+            float cropHeight = crop.bottom - crop.top;
+
+            float wFactor = frameWidth / cropWidth;
+            float hFactor = frameHeight / cropHeight;
+
+            Rect scaledDamageRect = Rect(
+                    (int)(preDamageRect.left * wFactor),
+                    (int)(preDamageRect.top * hFactor),
+                    (int)(preDamageRect.right * wFactor),
+                    (int)(preDamageRect.bottom * hFactor));
+            Region realDamage = Region(scaledDamageRect).translate(frame.left, frame.top);
+            error = hwcLayer->setSurfaceDamage(realDamage);
+        }
+    } else {
+        error = hwcLayer->setSurfaceDamage(surfaceDamageRegion);
+    }
     if (error != HWC2::Error::None) {
         ALOGE("[%s] Failed to set surface damage: %s (%d)", mName.string(),
                 to_string(error).c_str(), static_cast<int32_t>(error));
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index d75774686..ec83962f8 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -248,6 +248,13 @@ SurfaceFlinger::SurfaceFlinger()
     // but since /data may be encrypted, we need to wait until after vold
     // comes online to attempt to read the property. The property is
     // instead read after the boot animation
+    property_get("ro.hardware", value, "");
+    if (!strcmp(value, "hi3660") ||
+            !strcmp(value, "hi6250") ||
+            !strcmp(value, "hi3670") ||
+            !strcmp(value, "kirin970")) {
+        mDamageUsesScreenReference = true;
+    }
 }
 
 void SurfaceFlinger::onFirstRef()
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 980fc1f70..b992991ba 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -730,6 +730,8 @@ private:
     // Restrict layers to use two buffers in their bufferqueues.
     bool mLayerTripleBufferingDisabled = false;
 
+    bool mDamageUsesScreenReference;
+
     // these are thread safe
     mutable MessageQueue mEventQueue;
     FrameTracker mAnimFrameTracker;
-- 
2.14.3

